"""Contains all logic to call API and parse the return values, gives back api results in a nice way
"""
import json
import requests
from PIL import Image
from io import BytesIO

from PyQt6.QtGui import QPixmap

import constants
from models.file_model import FileModel
from models.user_model import UserInfo

user_info = None

def set_user_info(user_info_in: UserInfo):
    global user_info
    user_info = user_info_in


def get_files_from_api(tags_list: list[str]):
    """Actually calls the api given the tags to describe what we want like videos, etc

    Args:
        tags (list[str]): list of rules like should be a video, in inbox or archive
    """
    hydrus_key, api_port  = user_info.get_user_info()
    res = requests.get(
        url=constants.LOCALHOST+str(api_port)+constants.GET_FILE_SEARCH,
        headers={
            constants.HYDRUS_APIKEY_PARAM : hydrus_key,
        },
        params={
            "tags" : json.dumps(tags_list)
        },
        timeout= 10
    )
    file_ids = res.json()[constants.FILE_ID_JSON_KEY][:10]
       
    res = requests.get(
        url=constants.LOCALHOST+str(api_port)+"/get_files/file_metadata",
        headers={
            constants.HYDRUS_APIKEY_PARAM : hydrus_key,
        },
        params={
            constants.FILE_ID_JSON_KEY : json.dumps(file_ids)
        },
        timeout= 10
    )
    
    files_obj_list = []
    
    for file_metadata in res.json()[constants.FILE_LIST_METADATA_KEY]:
        file = FileModel()
        file.parse_api_metadata(file_metadata)
        file.pixmap = get_file_thumbnail(file.file_id)
        
        files_obj_list.append(file)
    
    return files_obj_list

def get_file_thumbnail(file_id:str)-> QPixmap:
    """Grabs a file's thumbnail as generated by hydrus. Uses API call for now

    Args:
        api_port (int): port of client api
        hydrus_key (str): key for hydrus api program
        file_id (str): id of file

    Returns:
        QPixmap: pixmap of the thumbnail
    """
    hydrus_key, api_port = user_info.get_user_info()
    res = requests.get(
        url=constants.LOCALHOST+str(api_port)+constants.GET_FILE_THUMBNAIL,
        headers={
            constants.HYDRUS_APIKEY_PARAM : hydrus_key,
        },
        params={
            "file_id": file_id
        },
        timeout= 10
    )

    pixmap = QPixmap()
    pixmap.loadFromData(res.content) #loading from bytes of contenta
    return pixmap

def get_full_image(file_id:str)-> QPixmap:
    """Grabs a file's full resolution image. Uses API call for now and also uses PIL's image objects

    Args:
        api_port (int): port of client api
        hydrus_key (str): key for hydrus api program
        file_id (str): id of file

    Returns:
        QPixmap: pixmap of the thumbnail
    """
    hydrus_key, api_port = user_info.get_user_info()
    res = requests.get(
        url=constants.LOCALHOST+str(api_port)+constants.GET_FULL_FILE,
        headers={
            constants.HYDRUS_APIKEY_PARAM : hydrus_key,
        },
        params={
            "file_id": file_id
        },
        timeout= 10
    )
    print("showing full image")
    image = Image.open(BytesIO(res.content))
    image.show()
    return image
